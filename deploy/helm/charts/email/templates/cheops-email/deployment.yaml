{{- $nodeRole := .Values.global.env -}}
{{- if or ( eq .Values.global.env "dev" ) ( eq .Values.global.env "test") -}}
{{- $nodeRole = "stage" -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cheops-email
  name: cheops-email
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
{{- if eq .Values.deploy_name "cpm" }}
{{- if eq .Values.global.env "prod" }}
    matchExpressions:
      - {key: app, operator: In, values: [cheops-email, laboratory]}
{{- else }}
    matchLabels:
      app: cheops-email
{{- end }}
{{- else }}
    matchLabels:
      app: cheops-email
{{- end}}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cheops-email
    spec:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - matchExpressions:
             - key: node-role
               operator: In
               values:
                  - {{ $nodeRole }}
      containers:
        - name: cheops-email
          image: registry.sirius.online/cheops-edu/cheops-email/cheops-email:{{ .Values.global.tag }}
          imagePullPolicy: IfNotPresent
          env:
           - name: GHCRTS
             value: {{ first (pluck .Values.global.env .Values.rts_config.email) | default .Values.rts_config.email._default }}
      lifecycle:
        preStop:
          httpGet:
           path: /stop
           port: 10120
      livenessProbe:
        preStop:
          httpGet:
           path: /health
           port: 10120
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        preStop:
          httpGet:
           path: /ready
           port: 10120
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      ports:
        - containerPort: 8000
          protocol: TCP
      resources:
        requests:
          memory: {{ pluck .Values.global.env .Values.resources.email.requests.memory | first | default .Values.resources.email.requests.memory._default | quote }}
          cpu: {{ pluck .Values.global.env .Values.resources.email.requests.cpu | first | default .Values.resources.email.requests.cpu._default | quote }}
      tolerations:
      - effect: NoSchedule
        key: node-role
        operator: Equal
        value: {{ $nodeRole }}
      - effect: NoSchedule
        key: app
        operator: Equal
        value: laboratory
      imagePullSecrets:
        - name: ndc-mjxwh
      initContainers:
      - command:
        - sh
        - -c
        - sysctl -w net.core.somaxconn=1024 && sysctl -w kernel.shm_rmid_forced=0
          && sysctl -w kernel.msgmax=65536
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        name: configure-sysctl
        resources: {}
        securityContext:
          privileged: true
          runAsUser: 0
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
